t_test$p.value==anova_test[[1]]$`Pr(>F)`[1]
round(t_test$p.value, digits=5)==round(anova_test[[1]]$`Pr(>F)`[1], digits=5)
t_test$statistic^2
anova_test[[1]]$`F value`[1]
round(t_test$statistic^2, digits=1)==round(anova_test[[1]]$`F value`[1], digits=1)
library(data.table)
#fread("https://raw.githubusercontent.com/CrumpLab/statisticsLab/master/data/Jamesetal2015Experiment2.csv")
all_data <- fread("data/Jamesetal2015Experiment2.csv")
library(data.table)
#fread("https://raw.githubusercontent.com/CrumpLab/statisticsLab/master/data/Jamesetal2015Experiment2.csv")
all_data <- fread("Jamesetal2015Experiment2.csv")
library(data.table)
#fread("https://raw.githubusercontent.com/CrumpLab/statisticsLab/master/data/Jamesetal2015Experiment2.csv")
all_data <- fread("Jamesetal2015Experiment2.csv")
library(data.table)
#fread("https://raw.githubusercontent.com/CrumpLab/statisticsLab/master/data/Jamesetal2015Experiment2.csv")
all_data <- fread("Jamesetal2015Experiment2.csv")
library(summarytools)
install(summarytools)
load.library(summarytools)
load(summarytools)
install.packages(summarytools)
view(dfSummary(all_data))
view(all_data)
library(data.table)
#fread("https://raw.githubusercontent.com/CrumpLab/statisticsLab/master/data/Jamesetal2015Experiment2.csv")
all_data <- fread("Jamesetal2015Experiment2.csv")
view(all_data)
all_data$Condition <- as.factor(all_data$Condition)
levels(all_data$Condition) <- c("Control",
"Reactivation+Tetris",
"Tetris_only",
"Reactivation_only")
library(data.table)
#fread("https://raw.githubusercontent.com/CrumpLab/statisticsLab/master/data/Jamesetal2015Experiment2.csv")
all_data <- fread("Jamesetal2015Experiment2.csv")
view(all_data)
all_data$Condition <- as.factor(all_data$Condition)
levels(all_data$Condition) <- c("Control",
"Reactivation+Tetris",
"Tetris_only",
"Reactivation_only")
library(dplyr)
library(ggplot2)
# get means and SEs
descriptive_df <- all_data %>%
group_by(Condition) %>%
summarise(means= mean(Days_One_to_Seven_Number_of_Intrusions),
SEs = sd(Days_One_to_Seven_Number_of_Intrusions)/sqrt(length(Days_One_to_Seven_Number_of_Intrusions)))
# Make the plot
ggplot(descriptive_df, aes(x=Condition, y=means))+
geom_bar(stat="identity", aes(fill=Condition))+ # add means
geom_errorbar(aes(ymin=means-SEs,               # add error bars
ymax=means+SEs), width=.1) +
geom_point(data=all_data, aes(x=Condition, y=Days_One_to_Seven_Number_of_Intrusions), alpha=.5)+
geom_point(alpha=.25)+
ylab("Intrusive Memories (Mean for Week)")
#ANOVA
aov(Days_One_to_Seven_Number_of_Intrusions ~ Condition, dataframe)
#ANOVA
aov(Days_One_to_Seven_Number_of_Intrusions ~ Condition, all_data)
summary(aov(Days_One_to_Seven_Number_of_Intrusions ~ Condition, all_data)
summary(aov(Days_One_to_Seven_Number_of_Intrusions ~ Condition, all_data)
summary(aov(Days_One_to_Seven_Number_of_Intrusions ~ Condition, all_data))
library(xtable)
aov_out<-aov(Days_One_to_Seven_Number_of_Intrusions ~ Condition, all_data)
summary_out<-summary(aov_out)
knitr::kable(xtable(summary_out))
View(aov_out)
View(descriptive_df)
View(summary_out)
library(papaja)
anova_test2 <- summary(aov(Days_One_to_Seven_Number_of_Intrusions ~ Condition, all_data))
summary(anova_test2)
apa_print(anova_test2)$full_results$Condition
We submitted the mean intrusive memories for the week from each subject in each condition to a one-factor between-subjects ANOVA, with Intervention type (No-task control, Reactivation Plus tetris, Tetris only, Reactivation only) as the sole independent variable. We found a main effect of Intervention type, `r apa_print(anova_test2)$full_results$Condition`.
library(papaja)
apa_print(anova_test2)$full_results$Condition
We submitted the mean intrusive memories for the week from each subject in each condition to a one-factor between-subjects ANOVA, with Intervention type (No-task control, Reactivation Plus tetris, Tetris only, Reactivation only) as the sole independent variable. We found a main effect of Intervention type, `r apa_print(anova_test2)$full_results$Condition`.
apa_print(anova_test2)$full_results$Condition
summary(anova_test2)
summary(aov(Days_One_to_Seven_Number_of_Intrusions ~ Condition, all_data))
summary(aov(Days_One_to_Seven_Number_of_Intrusions ~ Condition, all_data))$full_results$Condition
summary(aov(Days_One_to_Seven_Number_of_Intrusions ~ Condition, all_data))$full_results$Condition
We submitted the mean intrusive memories for the week from each subject in each condition to a one-factor between-subjects ANOVA, with Intervention type (No-task control, Reactivation Plus tetris, Tetris only, Reactivation only) as the sole independent variable. We found a main effect of Intervention type, `r apa_printaov(Days_One_to_Seven_Number_of_Intrusions ~ Condition, all_data)
summary(aov(Days_One_to_Seven_Number_of_Intrusions ~ Condition, all_data))$full_results$Condition`.
We submitted the mean intrusive memories for the week from each subject in each condition to a one-factor between-subjects ANOVA, with Intervention type (No-task control, Reactivation Plus tetris, Tetris only, Reactivation only) as the sole independent variable. We found a main effect of Intervention type, `r apa_printaov(
summary(aov(Days_One_to_Seven_Number_of_Intrusions ~ Condition, all_data)))$full_results$Condition`.
We submitted the mean intrusive memories for the week from each subject in each condition to a one-factor between-subjects ANOVA, with Intervention type (No-task control, Reactivation Plus tetris, Tetris only, Reactivation only) as the sole independent variable. We found a main effect of Intervention type, `r apa_printaov(
summary(aov(Days_One_to_Seven_Number_of_Intrusions ~ Condition, all_data))$full_results$Condition`.
knitr::opts_chunk$set(echo = TRUE)
library(tibble)
levels <- 3
n_per_level <- 10
random_data <- tibble(subjects = 1:(levels*n_per_level),
IV = as.factor(rep(1:levels, each = n_per_level)),
DV = rnorm(levels*n_per_level, 0, 1)
)
critical_F <- qf(.95,2,27)
aov.out <- aov(DV ~ IV, data = random_data)
simulated_F <- summary(aov.out)[[1]]$`F value`[1]
save_F_values <- length(1000)
for(i in 1:1000){
random_data <- tibble(subjects = 1:(levels*n_per_level),
IV = as.factor(rep(1:levels, each = n_per_level)),
DV = rnorm(levels*n_per_level, 0, 1)
)
aov.out <- aov(DV ~ IV, data = random_data)
simulated_F <- summary(aov.out)[[1]]$`F value`[1]
if(simulated_F < critical_F) break
aov.out <- aov(DV ~ IV, data = random_data)
simulated_F <- summary(aov.out)[[1]]$`F value`[1]
if(simulated_F < critical_F) break
library(tibble)
# construct a dataframe to represent sampling random subjects into each group of the design
levels <- 3
n_per_level <- 10
random_data <- tibble(subjects = 1:(levels*n_per_level),
IV = as.factor(rep(1:levels, each = n_per_level)),
DV = rnorm(levels*n_per_level, 0, 1)
)
critical_F <- qf(.95,2,27)
# compute the ANOVA and extractd the F-value
aov.out <- aov(DV ~ IV, data = random_data)
simulated_F <- summary(aov.out)[[1]]$`F value`[1]
# repeat the above many times to compute the F-distribution
for(i in 1:1000){
random_data <- tibble(subjects = 1:(levels*n_per_level),
IV = as.factor(rep(1:levels, each = n_per_level)),
DV = rnorm(levels*n_per_level, 0, 1)
)
aov.out <- aov(DV ~ IV, data = random_data)
simulated_F <- summary(aov.out)[[1]]$`F value`[1]
if(simulated_F < critical_F) break
}
library(tibble)
levels <- 3
n_per_level <- 10
random_data <- tibble(subjects = 1:(levels*n_per_level),
IV = as.factor(rep(1:levels, each = n_per_level)),
DV = rnorm(levels*n_per_level, 0, 1)
)
critical_F <- qf(.95,2,27)
# compute the ANOVA and extractd the F-value
aov.out <- aov(DV ~ IV, data = random_data)
simulated_F <- summary(aov.out)[[1]]$`F value`[1]
# repeat the above many times to compute the F-distribution
for(i in 1:1000){
random_data <- tibble(subjects = 1:(levels*n_per_level),
IV = as.factor(rep(1:levels, each = n_per_level)),
DV = rnorm(levels*n_per_level, 0, 1)
)
aov.out <- aov(DV ~ IV, data = random_data)
simulated_F <- summary(aov.out)[[1]]$`F value`[1]
if(simulated_F < critical_F) break
}
summary(aov.out)
ggplot(random_data, aes(x=IV, y=DV))+
geom_bar(stat="summary", fun="mean")+
geom_point
ggplot(random_data, aes(x=IV, y=DV))+
geom_bar(stat="summary", fun="mean")+
geom_point()
simulated_F > critical_F
# repeat the above many times to compute the F-distribution
for(i in 1:1000){
random_data <- tibble(subjects = 1:(levels*n_per_level),
IV = as.factor(rep(1:levels, each = n_per_level)),
DV = rnorm(levels*n_per_level, 0, 1)
)
aov.out <- aov(DV ~ IV, data = random_data)
simulated_F <- summary(aov.out)[[1]]$`F value`[1]
if(simulated_F > critical_F) break
}
ggplot(random_data, aes(x=IV, y=DV))+
geom_bar(stat="summary", fun="mean")+
geom_point()
library(tibble)
# construct a dataframe to represent sampling random subjects into each group of the design
levels <- 3
n_per_level <- 10
random_data <- tibble(subjects = 1:(levels*n_per_level),
IV = as.factor(rep(1:levels, each = n_per_level)),
DV = rnorm(levels*n_per_level, 0, 1)
)
critical_F <- qf(.95,2,27)
# compute the ANOVA and extractd the F-value
aov.out <- aov(DV ~ IV, data = random_data)
simulated_F <- summary(aov.out)[[1]]$`F value`[1]
# repeat the above many times to compute the F-distribution
for(i in 1:1000){
random_data <- tibble(subjects = 1:(levels*n_per_level),
IV = as.factor(rep(1:levels, each = n_per_level)),
DV = rnorm(levels*n_per_level, 0, 1)
)
aov.out <- aov(DV ~ IV, data = random_data)
simulated_F <- summary(aov.out)[[1]]$`F value`[1]
if(simulated_F > critical_F) break
}
simulated_F > critical_F
summary(aov.out)
library(ggplot2)
ggplot(random_data, aes(x=IV, y=DV))+
geom_bar(stat="summary", fun="mean")+
geom_point()
library(tibble)
# construct a dataframe to represent sampling random subjects into each group of the design
levels <- 3
n_per_level <- 10
random_data <- tibble(subjects = 1:(levels*n_per_level),
IV = as.factor(rep(1:levels, each = n_per_level)),
DV = rnorm(levels*n_per_level, 0, 1)
)
critical_F <- qf(.95,2,27)
# compute the ANOVA and extractd the F-value
aov.out <- aov(DV ~ IV, data = random_data)
simulated_F <- summary(aov.out)[[1]]$`F value`[1]
# repeat the above many times to compute the F-distribution
for(i in 1:1000){
random_data <- tibble(subjects = 1:(levels*n_per_level),
IV = as.factor(rep(1:levels, each = n_per_level)),
DV = rnorm(levels*n_per_level, 0, 1)
)
aov.out <- aov(DV ~ IV, data = random_data)
simulated_F <- summary(aov.out)[[1]]$`F value`[1]
if(simulated_F > critical_F) break
}
simulated_F > critical_F
summary(aov.out)
library(ggplot2)
ggplot(random_data, aes(x=IV, y=DV))+
geom_bar(stat="summary", fun="mean")+
geom_point()
save_F_values <- length(1000)
for(i in 1:1000){
random_data <- tibble(subjects = 1:(levels*n_per_level),
IV = as.factor(rep(1:levels, each = n_per_level)),
DV = rnorm(levels*n_per_level, 0, 1)
)
aov.out <- aov(DV ~ IV, data = random_data)
simulated_F <- summary(aov.out)[[1]]$`F value`[1]
save_F_values[i] <- simulated_F
}
library(ggplot2)
F_comparison <- tibble(type = rep(c("analytic","simulated"), each = 1000),
F_value = c(rf(1000,3,16),save_F_values))
ggplot(F_comparison, aes(x=F_value))+
geom_histogram()+
facet_wrap(~type)
F_value = c(rf(1000,levels-1,(levels*n_per_level),save_F_values))
save_F_values <- length(1000)
for(i in 1:1000){
random_data <- tibble(subjects = 1:(levels*n_per_level),
IV = as.factor(rep(1:levels, each = n_per_level)),
DV = rnorm(levels*n_per_level, 0, 1)
)
aov.out <- aov(DV ~ IV, data = random_data)
simulated_F <- summary(aov.out)[[1]]$`F value`[1]
save_F_values[i] <- simulated_F
}
library(ggplot2)
F_comparison <- tibble(type = rep(c("analytic","simulated"), each = 1000),                   F_value=c(rf(1000,levels-1,(levels*n_per_level),save_F_values))
ggplot(F_comparison, aes(x=F_value))+
save_F_values <- length(1000)
for(i in 1:1000){
random_data <- tibble(subjects = 1:(levels*n_per_level),
IV = as.factor(rep(1:levels, each = n_per_level)),
DV = rnorm(levels*n_per_level, 0, 1)
)
aov.out <- aov(DV ~ IV, data = random_data)
simulated_F <- summary(aov.out)[[1]]$`F value`[1]
save_F_values[i] <- simulated_F
}
library(ggplot2)
F_comparison <- tibble(type = rep(c("analytic","simulated"), each = 1000),
F_value=c(rf(1000,levels-1,(levels*n_per_level)-levels),save_F_values))
ggplot(F_comparison, aes(x=F_value, color=type))+
geom_histogram()+
facet_wrap(~type)
save_F_values <- length(1000)
for(i in 1:1000){
random_data <- tibble(subjects = 1:(levels*n_per_level),
IV = as.factor(rep(1:levels, each = n_per_level)),
DV = rnorm(levels*n_per_level, 0, 1)
)
aov.out <- aov(DV ~ IV, data = random_data)
simulated_F <- summary(aov.out)[[1]]$`F value`[1]
save_F_values[i] <- simulated_F
}
library(ggplot2)
F_comparison <- tibble(type = rep(c("analytic","simulated"), each = 1000),
F_value=c(rf(1000,levels-1,(levels*n_per_level)-levels),save_F_values))
ggplot(F_comparison, aes(x=F_value, color=type))+
geom_freqpoly(bins=50)
save_F_values <- length(1000)
for(i in 1:1000){
random_data <- tibble(subjects = 1:(levels*n_per_level),
IV = as.factor(rep(1:levels, each = n_per_level)),
DV = rnorm(levels*n_per_level, 1)
)
aov.out <- aov(DV ~ IV, data = random_data)
simulated_F <- summary(aov.out)[[1]]$`F value`[1]
save_F_values[i] <- simulated_F
}
library(ggplot2)
F_comparison <- tibble(type = rep(c("analytic","simulated_exp"), each = 1000),
F_value=c(rf(1000,levels-1,(levels*n_per_level)-levels),save_F_values))
ggplot(F_comparison, aes(x=F_value, color=type))+
geom_freqpoly(bins=50)
F_comparison <- tibble(type = rep(c("analytic","simulated_t1"), each = 1000),
F_value=c(rf(1000,levels-1,(levels*n_per_level)-levels),save_F_values))
ggplot(F_comparison, aes(x=F_value, color=type))+
geom_freqpoly(bins=50)
knitr::opts_chunk$set(echo = TRUE)
rbinom(20, 1, .05)
rbinom(20, 1, .05)
rbinom(20, 1, .05)
replicate(10000,rbinom(20, 1, .05))
A <- replicate(10000,(rbinom(20, 1, .05)))
hist(A)
hist(A)
A <- replicate(10000,(rbinom(20, 1, .05)))
hist(A)
A <- replicate(10000,sum(rbinom(20, 1, .05)))
hist(A)
length(A[A > 0])/10000
hist(B)
B <- replicate(10000,sum(rbinom(20, 1, .05)))
hist(B)
length(B[B] > 0])/10000
length(B[B > 0])/10000
B <- replicate(10000,sum(rbinom(50, 1, .05)))
hist(B)
length(B[B > 0])/10000
rbinom(20, 3, .05)
replicate(10000,sum(rbinom(20, 3, .05)))
D <- replicate(10000,sum(rbinom(20, 3, .05)))
length(D[D > 0])/10000
IV <- rep(1:2,each=20)
DV <- c(rnorm(20,0,1),rnorm(20,0,1))
sim_data <- tibble(IV,DV)
t.test(DV~IV, var.equal=TRUE, data = sim_data)
t.test(DV~IV, var.equal=TRUE, data = sim_data)
t.test(DV~IV, var.equal=TRUE, data = sim_data)
t.test(DV~IV, var.equal=TRUE, data = sim_data)
sim_data <- tibble(IV,DV)
t.test(DV~IV, var.equal=TRUE, data = sim_data)
IV <- rep(1:2,each=20)
DV <- c(rnorm(20,0,1),rnorm(20,0,1))
sim_data <- tibble(IV,DV)
t.test(DV~IV, var.equal=TRUE, data = sim_data)
t.test(DV~IV, var.equal=TRUE, data = sim_data)
IV <- rep(1:2,each=20)
DV <- c(rnorm(20,0,1),rnorm(20,0,1))
sim_data <- tibble(IV,DV)
t.test(DV~IV, var.equal=TRUE, data = sim_data)
IV <- rep(1:2,each=20)
DV <- c(rnorm(20,0,1),rnorm(20,0,1))
sim_data <- tibble(IV,DV)
t.test(DV~IV, var.equal=TRUE, data = sim_data)
IV <- rep(1:2,each=20)
DV <- c(rnorm(20,0,1),rnorm(20,0,1))
sim_data <- tibble(IV,DV)
t.test(DV~IV, var.equal=TRUE, data = sim_data)
IV <- rep(1:2,each=20)
DV <- c(rnorm(20,0,1),rnorm(20,0,1))
sim_data <- tibble(IV,DV)
t.test(DV~IV, var.equal=TRUE, data = sim_data)
t.test(DV~IV, var.equal=TRUE, data = sim_data)$p_value
library(tibble)
my_pvalues <- c()
for(i in 1:100){
IV <- rep(1:2,each=20)
DV <- c(rnorm(20,0,1),rnorm(20,0,1))
sim_data <- tibble(IV,DV)
my.pvalues[i] <- t.test(DV~IV, var.equal=TRUE, data = sim_data)$p_value
}
my_pvalues <- c()
library(tibble)
my_pvalues <- c()
for(i in 1:100){
IV <- rep(1:2,each=20)
DV <- c(rnorm(20,0,1),rnorm(20,0,1))
sim_data <- tibble(IV,DV)
my.pvalues[i] <- t.test(DV~IV, var.equal=TRUE, data = sim_data)$p_value
}
library(tibble)
my_pvalues <- c()
for(i in 1:100){
IV <- rep(1:2,each=20)
DV <- c(rnorm(20,0,1),rnorm(20,0,1))
sim_data <- tibble(IV,DV)
my_pvalues[i] <- t.test(DV~IV, var.equal=TRUE, data = sim_data)$p_value
}
hist(my_pvalues)
hist(my_pvalues)
library(tibble)
my_pvalues <- c()
for(i in 1:100){
IV <- rep(1:2,each=20)
DV <- c(rnorm(20,0,1),rnorm(20,0,1))
sim_data <- tibble(IV,DV)
my_pvalues[i] <- t.test(DV~IV, var.equal=TRUE, data = sim_data)$p_value
}
hist(my_pvalues)
hist(my_pvalues)
hist.default(my_pvalues)
library(tibble)
my_pvalues <- c()
for(i in 1:10000){
IV <- rep(1:2,each=20)
DV <- c(rnorm(20,0,1),rnorm(20,0,1))
sim_data <- tibble(IV,DV)
my_pvalues[i] <- t.test(DV~IV, var.equal=TRUE, data = sim_data)$p_value
}
hist(my_pvalues)
my_pvalues_n <-as.numeric(my_pvalues)
hist(my_pvalues_n)
library(tibble)
my_pvalues <- c()
for(i in 1:10000){
IV <- rep(1:2,each=20)
DV <- c(rnorm(20,0,1),rnorm(20,0,1))
sim_data <- tibble(IV,DV)
my_pvalues[i] <- t.test(DV~IV, var.equal=TRUE, data = sim_data)$p_value
}
my_pvalues_n <-as.numeric(my_pvalues)
hist(my_pvalues_n)
library(tibble)
my_pvalues <- c()
for(i in 1:10000){
IV <- rep(1:2,each=20)
DV <- c(rnorm(20,0,1),rnorm(20,0,1))
sim_data <- tibble(IV,DV)
my_pvalues[i] <- t.test(DV~IV, var.equal=TRUE, data = sim_data)$p.value
}
my_pvalues_n <- as.numeric(my_pvalues)
hist(my_pvalues_n)
my_pvalues <- replicate(10000,t.test(rnorm(20,0,1),rnorm(20,0,1), var.equal = TRUE)$p.value)
my_pvalues <- replicate(10000,t.test(rnorm(20,0,1),rnorm(20,0,1), var.equal = TRUE)$p.value)
hist(my_pvalues)
my_pvalues <- replicate(10000,t.test(rnorm(20,0.5,1),rnorm(20,0,1), var.equal = TRUE)$p.value)
hist(my_pvalues)
my_pvalues <- c()
for(i in 1:10){
IV <- factor(rep(1:4,each=20))
DV <- c(rnorm(20,0.5,1),rnorm(20,0,1),rnorm(20,0,1),rnorm(20,0,1))
sim_data <- tibble(IV,DV)
View(sim_data)
View(sim_data)
View(sim_data)
my_pvalues <- c()
for(i in 1:10){
IV <- factor(rep(1:4,each=20))
DV <- c(rnorm(20,0.5,1),rnorm(20,0,1),rnorm(20,0,1),rnorm(20,0,1))
sim_data <- tibble(IV,DV)
aov.out <- aov(DV~IVm sim_data)
my_pvalues <- c()
for(i in 1:10){
IV <- factor(rep(1:4,each=20))
DV <- c(rnorm(20,0.5,1),rnorm(20,0,1),rnorm(20,0,1),rnorm(20,0,1))
sim_data <- tibble(IV,DV)
aov.out <- aov(DV~IV, sim_data)
summary(aov.out)
c1 <- c(3, -1, -1, -1)
contrasts(sim_data$IV)
aov.out <- aov(DV~IV, sim_data)
summary(aov.out)
summary.aov(aov.out, split = list(IV=list("c1" = 1)))
save_results <- summary.aov(aov.out, split = list(IV=list("c1" = 1)))
my_pvalues <- c()
for(i in 1:10){
IV <- factor(rep(1:4,each=20))
DV <- c(rnorm(20,0.5,1),rnorm(20,0,1),rnorm(20,0,1),rnorm(20,0,1))
sim_data <- tibble(IV,DV)
c1 <- c(3, -1, -1, -1)
contrasts(sim_data$IV)
aov.out <- aov(DV~IV, sim_data)
save_results <- summary.aov(aov.out, split = list(IV=list("c1" = 1)))
my_pvalues[i] <- save_results[[1]]$`Pr(>F)`[2]
}
hist(my_pvalues)
my_pvalues <- c()
for(i in 1:1000){
IV <- factor(rep(1:4,each=20))
DV <- c(rnorm(20,0.5,1),rnorm(20,0,1),rnorm(20,0,1),rnorm(20,0,1))
sim_data <- tibble(IV,DV)
c1 <- c(3, -1, -1, -1)
contrasts(sim_data$IV)
aov.out <- aov(DV~IV, sim_data)
save_results <- summary.aov(aov.out, split = list(IV=list("c1" = 1)))
my_pvalues[i] <- save_results[[1]]$`Pr(>F)`[2]
}
hist(my_pvalues)
omnibus_pvalues <- c()
contrast_pvalues <- c()
for(i in 1:1000){
IV <- factor(rep(1:4,each=20))
DV <- c(rnorm(20,0,1),rnorm(20,0,1),rnorm(20,0,1),rnorm(20,0,1))
sim_data <- tibble(IV,DV)
c1 <- c(3, -1, -1, -1)
contrasts(sim_data$IV)
aov.out <- aov(DV~IV, sim_data)
save_results <- summary.aov(aov.out, split = list(IV=list("c1" = 1)))
omnibus_pvalues[i] <- save_results[[1]]$`Pr(>F)`[1]
contrast_pvalues[i] <- save_results[[1]]$`Pr(>F)`[2]
}
length(omnibus_pvalues[omnibus_pvalues < .05])/1000
length(omnibus_pvalues[omnibus_pvalues < .05])/1000
length(omnibus_pvalues[omnibus_pvalues < .05])/1000
length(omnibus_pvalues[omnibus_pvalues < .05])/1000
length(contrast_pvalues[contrast_pvalues < .05])/1000
